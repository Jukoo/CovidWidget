#!/usr/bin/python3  

# this  Programme  require  highly network connexion  to work well 
import os
import sys
import pip                               # require  pip  on your system ` sudo apt install python3-pip`   
import json
import subprocess
import logging as log


assert   sys.platform == "linux"   # Raise Assertion Error  if  the os  is not linux  

try  :
    import  requests 
except  : 
    pip.main(["install" , "requests"])  

# The whole programme is based in this config file  
#+ to set the main attributes  
CFG_FILE = "covset.cfg" 


setup_data =dict()   
# load the file 
if   os.path.exists(CFG_FILE)  and   os.path.getsize(CFG_FILE) >  0x000  :  
    with open (  CFG_FILE , "r" ) as s_setup  : # s_setup  as static_setup  
        # initializing setup_data    
        # that's contain  the  default config setup
        # it automaticly convert to  dict  type  to  better use  
        setup_data =json.loads(s_setup.read())

#  mapping  values   
current_country  = setup_data["local_country"] 
api_services     = setup_data["services"]["apis"]  
attr_data        = setup_data["main_attr"] 
geoloc           = setup_data["services"]["location_service"]


mesgout          = lambda  mesg                 : print(mesg)  
default_query    = lambda  url_args="countries" : api_services["main"]+url_args   
make_request     = lambda  args                 : requests.get(args).json()  



main_attr_data   = attr_data[0:3]  

# tracking  user location   for instance  to get metadata 
def  tracker  ()  : 
    mesgout("fetching  your location ... ")
    track_users_loc  = make_request(geoloc[0x001])
    user_ip , user_city , user_region , loc = (
            track_users_loc["ip"] ,         #  user  ip     address   [used in the script]
            track_users_loc["city"],        #  user  city   location  [not yet used in the script ][data available]
            track_users_loc["region"],      #  user  region location  [not yet used in the script ][data available] 
            track_users_loc["loc"]          #  user  coord  location  [not yet used in the script ][data available]
            )

    #   get  current location user  by using his ip address ... 
    define_user     = make_request(geoloc[0x00]+user_ip)["data"]
    country , continent  =  (
            define_user["country_name"] ,   
            define_user["continent_name"]
            )

    return  country, 

# collect all list  of   countries 
mesgout("fill contry collecion list ...  ")
countries_list   = [  c["country"]  for  c in make_request(default_query()) if c["country"]] 

data=None  

def   main  () :  
    global data 
    # if  no argument was set 
    # your current  location will be used 
    # to make http request  and  get the related data ...  
    if  len(sys.argv) == 0x001 : 
            country  = tracker()[0]  
            if country in countries_list : 
                country_pos = countries_list.index(country)
                data = make_request(default_query())[country_pos]

    # Otherwise   when user  specify  a country  
    # an http request w'll be made  and fetch  the data 
    # related  to the country passed as  stdout  argument
    if   len(sys.argv)  ==  0x002 : 
        by_country  =  sys.argv[0x001].capitalize()  
        if  by_country  in countries_list:
            country_pos=countries_list.index(by_country)
            data = make_request(default_query())[country_pos]
        else : 
            log.warning("No country found ... ") 
            sys.exit(2) 


main()

# make a  nice  display  
formatted_row = '{:<10} | {:<10} | {:>10} | {:>10} | {:<10}| {:<10}| {:<10} |'
print(formatted_row.format(*attr_data))  
e_data = []
if  data  is not None :  
    for es_data  in attr_data:
        e_data.append(data[es_data])
       
print(formatted_row.format(*e_data))
